require "busted.runner"()

describe("#sdk SDK.Utils.Value", function()
    -- before_each initialization
    local Value

    setup(function()
        _G.TUNING = {
            MIN_ENTITY_TEMP = -20,
            MAX_ENTITY_TEMP = 90,
        }
    end)

    teardown(function()
        _G.TUNING = nil
    end)

    before_each(function()
        Value = require "sdk/utils/value"
    end)

    describe("checkers", function()
        describe("IsBoolean()", function()
            describe("when a boolean value is passed", function()
                it("should return true", function()
                    assert.is_true(Value.IsBoolean(true))
                    assert.is_true(Value.IsBoolean(false))
                end)
            end)

            describe("when a non-boolean value is passed", function()
                it("should return false", function()
                    assert.is_false(Value.IsBoolean("string"))
                    assert.is_false(Value.IsBoolean(1))
                    assert.is_false(Value.IsBoolean({}))
                end)
            end)
        end)

        describe("IsEntityTemperature()", function()
            describe("when a number within a temperature range is passed", function()
                it("should return true", function()
                    assert.is_true(Value.IsEntityTemperature(_G.TUNING.MIN_ENTITY_TEMP))
                    assert.is_true(Value.IsEntityTemperature(_G.TUNING.MAX_ENTITY_TEMP))
                    assert.is_true(Value.IsEntityTemperature(0))
                end)
            end)

            describe("when a number non-within a temperature range is passed", function()
                it("should return false", function()
                    assert.is_false(Value.IsEntityTemperature("string"))
                    assert.is_false(Value.IsEntityTemperature(true))
                    assert.is_false(Value.IsEntityTemperature(false))
                    assert.is_false(Value.IsEntityTemperature(_G.TUNING.MIN_ENTITY_TEMP - 1))
                    assert.is_false(Value.IsEntityTemperature(_G.TUNING.MAX_ENTITY_TEMP + 1))
                    assert.is_false(Value.IsEntityTemperature(100))
                    assert.is_false(Value.IsEntityTemperature({}))
                end)
            end)
        end)

        describe("IsInteger()", function()
            describe("when an integer value is passed", function()
                it("should return true", function()
                    assert.is_true(Value.IsInteger(-1))
                    assert.is_true(Value.IsInteger(0))
                    assert.is_true(Value.IsInteger(1))
                end)
            end)

            describe("when a non-integer value is passed", function()
                it("should return false", function()
                    assert.is_false(Value.IsInteger(-0.5))
                    assert.is_false(Value.IsInteger(0.5))
                    assert.is_false(Value.IsInteger("string"))
                    assert.is_false(Value.IsInteger(true))
                    assert.is_false(Value.IsInteger(false))
                    assert.is_false(Value.IsInteger({}))
                end)
            end)
        end)

        describe("IsNumber()", function()
            describe("when a number value is passed", function()
                it("should return true", function()
                    assert.is_true(Value.IsNumber(-1))
                    assert.is_true(Value.IsNumber(0))
                    assert.is_true(Value.IsNumber(1))
                end)
            end)

            describe("when a non-number value is passed", function()
                it("should return false", function()
                    assert.is_false(Value.IsNumber("string"))
                    assert.is_false(Value.IsNumber(true))
                    assert.is_false(Value.IsNumber(false))
                    assert.is_false(Value.IsNumber({}))
                end)
            end)
        end)

        describe("IsPercent()", function()
            describe("when a percent value is passed", function()
                it("should return true", function()
                    assert.is_true(Value.IsPercent(0))
                    assert.is_true(Value.IsPercent(50))
                    assert.is_true(Value.IsPercent(100))
                end)
            end)

            describe("when a non-percent value is passed", function()
                it("should return false", function()
                    assert.is_false(Value.IsPercent("string"))
                    assert.is_false(Value.IsPercent(true))
                    assert.is_false(Value.IsPercent(false))
                    assert.is_false(Value.IsPercent(-1))
                    assert.is_false(Value.IsPercent(101))
                    assert.is_false(Value.IsPercent({}))
                end)
            end)
        end)

        describe("IsPoint()", function()
            describe("when a point value is passed", function()
                it("should return true", function()
                    assert.is_true(Value.IsPoint({ x = 1, y = 0, z = 3 }))
                    assert.is_true(Value.IsPoint(Vector3(1, 0, 3)))
                end)
            end)

            describe("when a non-point value is passed", function()
                it("should return false", function()
                    assert.is_false(Value.IsPoint("string"))
                    assert.is_false(Value.IsPoint(true))
                    assert.is_false(Value.IsPoint(false))
                    assert.is_false(Value.IsPoint(0))
                    assert.is_false(Value.IsPoint({}))
                end)
            end)
        end)

        describe("IsSeason()", function()
            describe("when a season value is passed", function()
                it("should return true", function()
                    assert.is_true(Value.IsSeason("autumn"))
                    assert.is_true(Value.IsSeason("winter"))
                    assert.is_true(Value.IsSeason("spring"))
                    assert.is_true(Value.IsSeason("summer"))
                end)
            end)

            describe("when a non-season value is passed", function()
                it("should return false", function()
                    assert.is_false(Value.IsSeason("string"))
                    assert.is_false(Value.IsSeason(true))
                    assert.is_false(Value.IsSeason(false))
                    assert.is_false(Value.IsSeason(0))
                    assert.is_false(Value.IsSeason({}))
                end)
            end)
        end)

        describe("IsString()", function()
            describe("when a string value is passed", function()
                it("should return true", function()
                    assert.is_true(Value.IsString("string"))
                end)
            end)

            describe("when a non-string value is passed", function()
                it("should return false", function()
                    assert.is_false(Value.IsString(true))
                    assert.is_false(Value.IsString(false))
                    assert.is_false(Value.IsString(0))
                    assert.is_false(Value.IsString({}))
                end)
            end)
        end)

        describe("IsUnitInterval()", function()
            describe("when a unit interval value is passed", function()
                it("should return true", function()
                    assert.is_true(Value.IsUnitInterval(0))
                    assert.is_true(Value.IsUnitInterval(0.5))
                    assert.is_true(Value.IsUnitInterval(1))
                end)
            end)

            describe("when a non-unit interval value is passed", function()
                it("should return false", function()
                    assert.is_false(Value.IsUnitInterval(true))
                    assert.is_false(Value.IsUnitInterval(false))
                    assert.is_false(Value.IsUnitInterval({}))
                    assert.is_false(Value.IsUnitInterval(-1))
                    assert.is_false(Value.IsUnitInterval(2))
                end)
            end)
        end)
    end)

    describe("converters", function()
        describe("ToClock()", function()
            describe("when a seconds value is passed", function()
                it("should return hours, minutes and seconds", function()
                    local h, m, s

                    h, m, s = Value.ToClock(30615)
                    assert.is_equal(8, h)
                    assert.is_equal(30, m)
                    assert.is_equal(15, s)

                    h, m, s = Value.ToClock(0)
                    assert.is_equal(0, h)
                    assert.is_equal(0, m)
                    assert.is_equal(0, s)
                end)
            end)

            describe("when a non-seconds value is passed", function()
                it("should return nil", function()
                    assert.is_nil(Value.ToClock(true))
                end)
            end)
        end)

        describe("ToClockString()", function()
            describe("when a seconds value is passed", function()
                describe("when has_no_hours is not passed", function()
                    it("should return a clock string", function()
                        assert.is_equal("08:30:15", Value.ToClockString(30615))
                        assert.is_equal("00:00:00", Value.ToClockString(0))
                    end)
                end)

                describe("when has_no_hours is passed", function()
                    it("should return a clock string", function()
                        assert.is_equal("30:15", Value.ToClockString(30615, true))
                        assert.is_equal("00:00", Value.ToClockString(0, true))
                    end)
                end)
            end)

            describe("when a non-seconds value is passed", function()
                it("should return nil", function()
                    assert.is_nil(Value.ToClockString(true))
                end)
            end)
        end)

        describe("ToDaysString()", function()
            describe("when a days value is passed", function()
                it("should return a float string", function()
                    assert.is_equal("-1 day", Value.ToDaysString(-1))
                    assert.is_equal("0 days", Value.ToDaysString(0))
                    assert.is_equal("0.5 day", Value.ToDaysString(0.5))
                    assert.is_equal("1 day", Value.ToDaysString(1))
                    assert.is_equal("100 days", Value.ToDaysString(100))
                end)
            end)

            describe("when a non-days value is passed", function()
                it("should return nil", function()
                    assert.is_nil(Value.ToDaysString(true))
                end)
            end)
        end)

        describe("ToFloatString()", function()
            describe("when a number value is passed", function()
                it("should return a float string", function()
                    assert.is_equal("-1.00", Value.ToFloatString(-1))
                    assert.is_equal("0.00", Value.ToFloatString(0))
                    assert.is_equal("0.50", Value.ToFloatString(0.5))
                    assert.is_equal("1.00", Value.ToFloatString(1))
                end)
            end)

            describe("when a non-number value is passed", function()
                it("should return nil", function()
                    assert.is_nil(Value.ToFloatString(true))
                end)
            end)
        end)

        describe("ToPercentString()", function()
            describe("when a number value is passed", function()
                it("should return a percent string", function()
                    assert.is_equal("-1.00%", Value.ToPercentString(-1))
                    assert.is_equal("0.00%", Value.ToPercentString(0))
                    assert.is_equal("0.50%", Value.ToPercentString(0.5))
                    assert.is_equal("1.00%", Value.ToPercentString(1))
                    assert.is_equal("100.00%", Value.ToPercentString(100))
                end)
            end)

            describe("when a non-number value is passed", function()
                it("should return nil", function()
                    assert.is_nil(Value.ToPercentString(true))
                end)
            end)
        end)

        describe("ToDegreeString()", function()
            describe("when a number value is passed", function()
                it("should return a degrees string", function()
                    assert.is_equal("-1.00°", Value.ToDegreeString(-1))
                    assert.is_equal("0.00°", Value.ToDegreeString(0))
                    assert.is_equal("0.50°", Value.ToDegreeString(0.5))
                    assert.is_equal("1.00°", Value.ToDegreeString(1))
                    assert.is_equal("100.00°", Value.ToDegreeString(100))
                end)
            end)

            describe("when a non-number value is passed", function()
                it("should return nil", function()
                    assert.is_nil(Value.ToDegreeString(true))
                end)
            end)
        end)
    end)
end)
